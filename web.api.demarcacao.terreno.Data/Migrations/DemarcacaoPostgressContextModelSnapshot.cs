// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using web.api.demarcacao.terreno.Data.Context;

namespace web.api.demarcacao.terreno.Data.Migrations
{
    [DbContext(typeof(DemarcacaoPostgressContext))]
    partial class DemarcacaoPostgressContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Coordenada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("IdTerreno")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_TERRENO");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric")
                        .HasColumnName("LATITUDE");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric")
                        .HasColumnName("LONGITUDE");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer")
                        .HasColumnName("ORDEM");

                    b.HasKey("Id");

                    b.HasIndex("IdTerreno");

                    b.ToTable("COORDENADA");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Empreendimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("GrupoEmpresa")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("GRUPO_EMPRESA");

                    b.HasKey("Id");

                    b.ToTable("EMPREENDIMENTO");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Interface", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TAG");

                    b.HasKey("Id");

                    b.ToTable("INTERFACE");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Descricao = "Cadastro de Empreendimento",
                            Tag = "CAD_EMP"
                        },
                        new
                        {
                            Id = 2L,
                            Descricao = "Atualização de Empreendimento",
                            Tag = "ATUAL_EMP"
                        },
                        new
                        {
                            Id = 3L,
                            Descricao = "Exclusão de Empreendimento",
                            Tag = "EXC_EMP"
                        },
                        new
                        {
                            Id = 4L,
                            Descricao = "Listagem de Empreendimento",
                            Tag = "LIST_EMP"
                        },
                        new
                        {
                            Id = 5L,
                            Descricao = "Cadastro de Terreno",
                            Tag = "CAD_TERR"
                        },
                        new
                        {
                            Id = 6L,
                            Descricao = "Atualização de Terreno",
                            Tag = "ATUAL_TERR"
                        },
                        new
                        {
                            Id = 7L,
                            Descricao = "Exclusão de Terreno",
                            Tag = "EXC_TERR"
                        },
                        new
                        {
                            Id = 8L,
                            Descricao = "Listagem de Terreno",
                            Tag = "LIST_TERR"
                        });
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Terreno", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("DESCRICAO");

                    b.Property<long>("IdEmpreendimento")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_EMPREENDIMENTO");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpreendimento");

                    b.ToTable("TERRENO");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LOGIN");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("NOME");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PASSWORD");

                    b.HasKey("Id");

                    b.ToTable("USUARIO");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.UsuarioInterface", b =>
                {
                    b.Property<long>("IdUsuario")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_USUARIO");

                    b.Property<long>("IdInterface")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_INTERFACE");

                    b.HasKey("IdUsuario", "IdInterface");

                    b.HasIndex("IdInterface");

                    b.ToTable("USUARIO_INTERFACE");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Coordenada", b =>
                {
                    b.HasOne("web.api.demarcacao.terreno.Domain.Entities.Terreno", "Terreno")
                        .WithMany("Coordenadas")
                        .HasForeignKey("IdTerreno")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terreno");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Empreendimento", b =>
                {
                    b.OwnsOne("web.api.demarcacao.terreno.Domain.Entities.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<long>("EmpreendimentoId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Bairro")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_BAIRRO");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_CEP");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_CIDADE");

                            b1.Property<string>("Complemento")
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_COMPLEMENTO");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_ESTADO");

                            b1.Property<string>("Logradouro")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_LOGRADOURO");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_NUMERO");

                            b1.Property<string>("Referencia")
                                .HasColumnType("text")
                                .HasColumnName("ENDERECO_REFERENCIA");

                            b1.HasKey("EmpreendimentoId");

                            b1.ToTable("EMPREENDIMENTO");

                            b1.WithOwner("Empreendimento")
                                .HasForeignKey("EmpreendimentoId");

                            b1.Navigation("Empreendimento");
                        });

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Terreno", b =>
                {
                    b.HasOne("web.api.demarcacao.terreno.Domain.Entities.Empreendimento", "Empreendimento")
                        .WithMany("Terrenos")
                        .HasForeignKey("IdEmpreendimento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empreendimento");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.UsuarioInterface", b =>
                {
                    b.HasOne("web.api.demarcacao.terreno.Domain.Entities.Interface", "Interface")
                        .WithMany("UsuarioInterfaces")
                        .HasForeignKey("IdInterface")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web.api.demarcacao.terreno.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioInterfaces")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interface");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Empreendimento", b =>
                {
                    b.Navigation("Terrenos");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Interface", b =>
                {
                    b.Navigation("UsuarioInterfaces");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Terreno", b =>
                {
                    b.Navigation("Coordenadas");
                });

            modelBuilder.Entity("web.api.demarcacao.terreno.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("UsuarioInterfaces");
                });
#pragma warning restore 612, 618
        }
    }
}
